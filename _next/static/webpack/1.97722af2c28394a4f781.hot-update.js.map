{"version":3,"file":"static/webpack/1.97722af2c28394a4f781.hot-update.js","sources":["webpack:///./simulations/sketches/InfectionSketch.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport PropTypes from 'prop-types';\nimport { useRef, useEffect, useState } from 'react';\nimport P5 from 'p5';\nimport { setupCanvas, handleInteractions } from '../SketchHelpers';\nimport DiseaseState from '../DiseaseState';\nimport Statistics from '../Statistics';\nimport Graph from '../Graph';\nimport Counters from '../Counters';\nimport Replay from '../Replay';\n\nconst InfectionSketch = (props) => {\n  const {\n    id,\n    canvasWidth,\n    canvasHeight,\n    populationSize,\n    recoveryTime,\n    mortalityRate,\n    graphWidth,\n    graphHeight,\n    maxFrameCount,\n    backgroundColor,\n    setupPopulation,\n  } = props;\n\n  const containerRef = useRef();\n  const statistics = new Statistics({});\n  const [counters, setCounters] = useState(statistics.counters());\n  const [timelines, setTimelines] = useState(statistics.timelines());\n  const [showReplay, setShowReplay] = useState(false);\n  const [handleReplay, setHandleReplay] = useState();\n\n  const sketch = (p) => {\n    let population = [];\n\n    const updateState = (person) => {\n      if (person.state !== DiseaseState.INFECTED) return;\n\n      if (person.infectedTime > recoveryTime / 2 && !person.willSurvive) {\n        person.state = DiseaseState.FATAL;\n        statistics.fatal += 1;\n        statistics.infected -= 1;\n        return;\n      }\n\n      if (person.infectedTime >= recoveryTime) {\n        person.state = DiseaseState.CURED;\n        statistics.cured += 1;\n        statistics.infected -= 1;\n        return;\n      }\n\n      person.infectedTime += 1;\n    };\n\n    const initialize = () => {\n      population = [];\n      statistics.reset();\n      setCounters(statistics.counters());\n      setTimelines(statistics.timelines());\n      setShowReplay(false);\n      setupPopulation(p, population, populationSize, statistics);\n      p.frameCount = -1;\n      p.loop();\n    };\n\n    p.setup = () => {\n      setupCanvas(p, canvasWidth, canvasHeight);\n      initialize();\n      setHandleReplay(() => initialize);\n    };\n\n    p.draw = () => {\n      if (p.frameCount === maxFrameCount) {\n        p.noLoop();\n        setShowReplay(true);\n      }\n\n      p.background(backgroundColor);\n\n      population.forEach((person) => {\n        updateState(person);\n        person.move();\n        handleInteractions(p, person, population, statistics, mortalityRate);\n        person.render();\n      });\n\n      statistics.recordTimelines();\n\n      if (p.frameCount % 2 === 0) {\n        setCounters(statistics.counters());\n        setTimelines(statistics.timelines());\n      }\n    };\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-new\n    new P5(sketch, containerRef.current);\n  }, []);\n\n  return (\n    <div>\n      <Counters counters={counters} />\n      <Graph\n        width={graphWidth}\n        height={graphHeight}\n        timelines={timelines}\n        populationSize={populationSize}\n      />\n\n      <div id={id} ref={containerRef} className={showReplay && 'overlay'} style={{ maxWidth: canvasWidth, position: 'relative' }}>\n        <Replay show={showReplay} onClick={handleReplay} />\n      </div>\n\n      <style jsx global>\n        {`\n          .overlay canvas {\n            opacity: 0.2;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nInfectionSketch.propTypes = {\n  id: PropTypes.string.isRequired,\n  canvasWidth: PropTypes.number,\n  canvasHeight: PropTypes.number,\n  populationSize: PropTypes.number,\n  recoveryTime: PropTypes.number,\n  mortalityRate: PropTypes.number,\n  graphWidth: PropTypes.number,\n  graphHeight: PropTypes.number,\n  maxFrameCount: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  setupPopulation: PropTypes.func.isRequired,\n};\n\nInfectionSketch.defaultProps = {\n  canvasWidth: 640,\n  canvasHeight: 480,\n  populationSize: 200,\n  recoveryTime: 500,\n  mortalityRate: 0,\n  graphWidth: 640,\n  graphHeight: 60,\n  maxFrameCount: 1600,\n  backgroundColor: '#f8f9fc',\n};\n\nexport default InfectionSketch;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;;;;A","sourceRoot":""}