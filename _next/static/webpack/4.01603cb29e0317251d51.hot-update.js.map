{"version":3,"file":"static/webpack/4.01603cb29e0317251d51.hot-update.js","sources":["webpack:///./simulations/Graph.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport DiseaseState from './DiseaseState';\n\nconst Graph = (props) => {\n  const {\n    width,\n    height,\n    timelines,\n    populationSize,\n  } = props;\n\n  const generatePath = (dataset) => {\n    const horizontalStep = width / 1600;\n    const verticalStep = height / populationSize;\n\n    let pathData = `M 0 ${height}`;\n\n    dataset.forEach((record, i) => {\n      const x = horizontalStep * i;\n      const y = height - (verticalStep * record);\n      pathData = `${pathData} L ${x} ${y}`;\n    });\n\n    pathData = `${pathData} V ${height} L 0 ${height}`;\n\n    return pathData;\n  };\n\n  const generateInversePath = (dataset) => {\n    const horizontalStep = width / 1600;\n    const verticalStep = height / populationSize;\n\n    let pathData = 'M 0 0';\n\n    dataset.forEach((record, i) => {\n      const x = horizontalStep * i;\n      const y = verticalStep * record;\n      pathData = `${pathData} L ${x} ${y}`;\n    });\n\n    pathData = `${pathData} V 0 L 0 0`;\n\n    return pathData;\n  };\n\n  return (\n    <svg\n      className=\"graph\"\n      viewBox={`0 0 ${width} ${height}`}\n      style={{ maxWidth: width }}\n    >\n      <g>\n        <rect width={width} height={height} className=\"background\" />\n        <path d={generatePath(timelines.infectedTimeline)} className=\"infected\" />\n        <path d={generateInversePath(timelines.unaffectedTimeline)} className=\"unaffected\" />\n        <path d={generateInversePath(timelines.curedTimeline)} className=\"cured\" />\n      </g>\n\n      <style jsx>\n        {`\n          .graph {\n            width: 100%;\n            height: auto;\n          }\n\n          .graph .background {\n            fill: #eeeeee;\n          }\n\n          .graph .unaffected {\n            fill: ${DiseaseState.UNAFFECTED.color};\n          }\n\n          .graph .infected {\n            fill: ${DiseaseState.INFECTED.color};\n          }\n\n          .graph .cured {\n            fill: ${DiseaseState.CURED.color};\n          }\n        `}\n      </style>\n    </svg>\n  );\n};\n\nGraph.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  timelines: PropTypes.object.isRequired,\n  populationSize: PropTypes.number.isRequired,\n};\n\nGraph.defaultProps = {\n  width: 600,\n  height: 60,\n};\n\nexport default Graph;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}