{"version":3,"file":"static/webpack/5.058a41d6ba8f2d1e5436.hot-update.js","sources":["webpack:///./simulations/sketches/Immunity.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport PropTypes from 'prop-types';\nimport { useRef, useEffect, useState } from 'react';\nimport P5 from 'p5';\nimport { setupCanvas, handleInteractions } from '../SketchHelpers';\nimport Person from '../Person';\nimport DiseaseState from '../DiseaseState';\nimport Replay from '../Replay';\n\nconst RulesSketch = (props) => {\n  const {\n    backgroundColor,\n    maxFrameCount,\n  } = props;\n\n  const canvasWidth = 300;\n  const canvasHeight = 100;\n\n  const containerRef = useRef();\n  const [showReplay, setShowReplay] = useState(false);\n  const [handleReplay, setHandleReplay] = useState();\n\n  const sketch = (p) => {\n    let population = [];\n\n    const setupPopulation = () => {\n      population[0] = new Person({\n        x: 100,\n        y: 48,\n        horizontalSpeed: 1,\n        verticalSpeed: 0,\n        radius: 30,\n        state: DiseaseState.INFECTED,\n        p5: p,\n      });\n\n      population[1] = new Person({\n        x: 170,\n        y: 48,\n        horizontalSpeed: 0,\n        verticalSpeed: 0,\n        radius: 30,\n        state: DiseaseState.CURED,\n        p5: p,\n      });\n    };\n\n    const initialize = () => {\n      population = [];\n      setupPopulation();\n      setShowReplay(false);\n      p.frameCount = -1;\n      p.loop();\n    };\n\n    p.setup = () => {\n      setupCanvas(p, canvasWidth, canvasHeight);\n      setupPopulation();\n      setHandleReplay(() => initialize);\n    };\n\n    p.draw = () => {\n      if (p.frameCount === maxFrameCount) {\n        p.noLoop();\n        setShowReplay(true);\n      }\n\n      p.background(backgroundColor);\n\n      population.forEach((person) => {\n        person.move();\n        handleInteractions(p, person, population);\n        person.render();\n      });\n    };\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-new\n    new P5(sketch, containerRef.current);\n  }, []);\n\n  return (\n    <div id=\"immunity\" ref={containerRef} className={showReplay && 'overlay'} style={{ maxWidth: canvasWidth, position: 'relative' }}>\n      <Replay show={showReplay} onClick={handleReplay} />\n      <style jsx global>\n        {`\n          .overlay canvas {\n            opacity: 0.2;\n          }\n\n          canvas.simulation {\n            width: 100% !important;\n            height: auto !important;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nRulesSketch.propTypes = {\n  backgroundColor: PropTypes.string,\n  maxFrameCount: PropTypes.number,\n};\n\nRulesSketch.defaultProps = {\n  backgroundColor: '#f8f9fc',\n  maxFrameCount: 500,\n};\n\nexport default RulesSketch;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}