{"version":3,"file":"static/webpack/1.6c9f3a25a74504a45484.hot-update.js","sources":["webpack:///./simulations/no_restrictions/Infection.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useEffect, useState } from 'react';\nimport p5 from 'p5';\nimport Person from '../Person';\nimport DiseaseState from '../DiseaseState';\nimport { checkCollision, changeDirections } from '../Physics';\nimport Statistics from '../Statistics';\nimport Graph from '../Graph';\nimport Counters from '../Counters';\nimport Replay from '../Replay';\n\nconst Infection = (props) => {\n  const {\n    populationSize,\n    recoveryTime,\n    mortalityRate\n  } = props;\n\n  const containerRef = useRef();\n  const statistics = new Statistics({});\n  const [counters, setCounters] = useState(statistics.counters());\n  const [timelines, setTimelines] = useState(statistics.timelines());\n  const [showReplay, setShowReplay] = useState(false);\n  const [handleReplay, setHandleReplay] = useState();\n\n  const sketch = (p) => {\n    let population = [];\n\n    const setupCanvas = (width, height) => {\n      const canvas = p.createCanvas(width, height);\n      canvas.class('simulation');\n    };\n\n    const setupPopulation = (size) => {\n      population[0] = new Person({\n        x: p.random(Person.defaultRadius, p.width - Person.defaultRadius),\n        y: p.random(Person.defaultRadius, p.height - Person.defaultRadius),\n        radius: 10,\n        state: DiseaseState.INFECTED,\n        p5: p,\n      });\n\n      statistics.infected += 1;\n\n      for (let i = 1; i < size; i += 1) {\n        population[i] = new Person({\n          x: p.random(Person.defaultRadius, p.width - Person.defaultRadius),\n          y: p.random(Person.defaultRadius, p.height - Person.defaultRadius),\n          radius: 10,\n          state: DiseaseState.UNAFFECTED,\n          p5: p,\n        });\n\n        statistics.unaffected += 1;\n      }\n    };\n\n    const handleInteractions = (person) => {\n      population.forEach((other) => {\n        if (other === person) return;\n        if (person.state === DiseaseState.FATAL || other.state === DiseaseState.FATAL) return;\n\n        if (checkCollision(person, other)) {\n          changeDirections(person, other);\n\n          if (person.state === other.state) return;\n          if (person.state === DiseaseState.CURED || other.state === DiseaseState.CURED) return;\n\n          if (person.infect(p.random(0, 1) > mortalityRate)) {\n            statistics.infected += 1;\n            statistics.unaffected -= 1;\n          }\n\n          if (other.infect(p.random(0, 1) > mortalityRate)) {\n            statistics.infected += 1;\n            statistics.unaffected -= 1;\n          }\n        }\n      });\n    };\n\n    const updateState = (person) => {\n      if (person.state !== DiseaseState.INFECTED) return;\n\n      if (person.infectedTime > recoveryTime / 2 && !person.willSurvive) {\n        person.state = DiseaseState.FATAL;\n        statistics.fatal += 1;\n        statistics.infected -= 1;\n        return;\n      }\n\n      if (person.infectedTime >= recoveryTime) {\n        person.state = DiseaseState.CURED;\n        statistics.cured += 1;\n        statistics.infected -= 1;\n        return;\n      }\n\n      person.infectedTime += 1;\n    };\n\n    const initialize = () => {\n      population = [];\n      statistics.reset();\n      setCounters(statistics.counters());\n      setTimelines(statistics.timelines());\n      setShowReplay(false);\n      setupPopulation(populationSize);\n      p.frameCount = -1;\n      p.loop();\n    };\n\n    p.setup = () => {\n      setupCanvas(640, 480);\n      initialize();\n      setHandleReplay(() => initialize);\n    };\n\n    p.draw = () => {\n      if (p.frameCount === 1600) {\n        p.noLoop();\n        setShowReplay(true);\n      }\n\n      p.background('white');\n\n      population.forEach((person) => {\n        updateState(person);\n        person.move();\n        handleInteractions(person);\n        person.render();\n      });\n\n      statistics.recordTimelines();\n\n      if (p.frameCount % 2 === 0) {\n        setCounters(statistics.counters());\n        setTimelines(statistics.timelines());\n      }\n    };\n  };\n\n  useEffect(() => {\n    const p = new p5(sketch, containerRef.current);\n  }, []);\n\n  return (\n    <div>\n      <Counters counters={counters} />\n      <Graph width={300} height={60} timelines={timelines} populationSize={populationSize} />\n\n      <div id=\"infection\" ref={containerRef} className={showReplay && 'overlay'} style={{ maxWidth: 640, position: 'relative' }}>\n        <Replay show={showReplay} onClick={handleReplay} />\n      </div>\n\n      <style jsx global>\n        {`\n          .overlay canvas {\n            opacity: 0.2;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nInfection.propTypes = {\n  populationSize: PropTypes.number.isRequired,\n  recoveryTime: PropTypes.number,\n  mortalityRate: PropTypes.number,\n};\n\nInfection.defaultProps = {\n  recoveryTime: 500,\n  mortalityRate: 0,\n};\n\nexport default Infection;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAaiBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAKA;;;;A","sourceRoot":""}